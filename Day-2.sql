CREATE DATABASE IF NOT EXISTS sales_db;

CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    city VARCHAR(50),
    registration_date DATE
);
CREATE TABLE products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(100),
    category VARCHAR(50),
    price DECIMAL(10,2)
);
CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    quantity INT,
    order_date DATE,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);
-- Insert into customers
INSERT INTO customers (name, email, city, registration_date) VALUES
('Ravi Kumar', 'ravi.k@example.com', 'Delhi', '2023-01-15'),
('Sneha Joshi', 'sneha.j@example.com', 'Mumbai', '2022-12-10'),
('Aman Singh', 'aman.s@example.com', 'Bangalore', '2023-03-20'),
('Pooja Rani', 'pooja.r@example.com', 'Hyderabad', '2022-11-05');

-- Insert into products
INSERT INTO products (product_name, category, price) VALUES
('Laptop', 'Electronics', 65000.00),
('Smartphone', 'Electronics', 25000.00),
('Office Chair', 'Furniture', 7000.00),
('Notebook Pack', 'Stationery', 250.00);

-- Insert into orders
INSERT INTO orders (customer_id, product_id, quantity, order_date) VALUES
(1, 1, 1, '2023-02-01'),
(2, 2, 2, '2023-02-05'),
(3, 3, 1, '2023-03-25'),
(1, 4, 5, '2023-02-10'),
(4, 2, 1, '2023-01-20');




SELECT * FROM customers;
SELECT * FROM orders;
SELECT * FROM products;

-- 1.List the names and cities of all customers who have placed an order. 
SELECT c.name,c.city from customers c
INNER JOIN orders o
ON c.customer_id=o.customer_id;

-- 2.Which product has been ordered the most (based on total quantity)?
SELECT p.product_name,SUM(o.quantity) as count FROM orders o
INNER JOIN products p
ON o.product_id=p.product_id
GROUP BY p.product_name
ORDER BY count desc;

-- 3.Find the total revenue generated by each product. 
SELECT p.product_name , SUM(o.quantity*p.price)  FROM orders o
INNER JOIN products p
ON o.product_id=p.product_id
GROUP BY p.product_name ; 



-- 4. List all customers who registered in 2023.
SELECT * FROM customers
WHERE YEAR(registration_date)=2023;

-- 5.Find the customer who placed the highest total value order (quantity × price). 
SELECT c.name,SUM(o.quantity*p.price) as total FROM customers C
INNER JOIN orders o
ON c.customer_id=o.customer_id
INNER JOIN products p
ON o.product_id=p.product_id
GROUP BY c.name
ORDER BY total DESC
LIMIT 1;

-- 6 How many orders were placed for products in the ‘Electronics’ category?
SELECT count(*)  FROM orders o
INNER JOIN products p
ON o.product_id=p.product_id
WHERE p.category='Electronics';

-- 7 Show the total number of products sold per category.
SELECT p.category,p.product_name,count(*) as total_sales FROM orders o
INNER JOIN products p
ON o.product_id=p.product_id
GROUP BY p.category,p.product_name;

-- 8 Which customer ordered the highest number of items in a single order?
SELECT c.name, o.quantity
FROM orders o
INNER JOIN customers c ON o.customer_id = c.customer_id
ORDER BY o.quantity DESC
LIMIT 1; 

-- 9. Display the order date and total price for each order.
SELECT o.order_date,o.quantity*p.price FROM orders o
INNER JOIN products p
ON o.product_id=p.product_id;

-- 10 Find the average order value (total price) per customer.
SELECT c.name,round(AVG(o.quantity*p.price),2) FROM customers c
INNER JOIN orders o 
ON c.customer_id=o.customer_id
INNER JOIN products p
ON o.product_id=p.product_id
GROUP BY c.name
